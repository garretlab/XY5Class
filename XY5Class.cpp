#include <avr/pgmspace.h>
#include "Arduino.h"
#include "XY5Class.h"

XY5Class::XY5Class(Stream *port) : port(port) {
}

void XY5Class::begin(int displayWidth, int bufferWidth, int address) {
  this->displayWidth = displayWidth;
  this->bufferWidth = bufferWidth;
  this->address = address;
  buffer = (uint8_t *)calloc(bufferWidth, sizeof(uint8_t));
  cursor = 0;
  window = 0;
}

void XY5Class::clear() {
  for (int i = 0; i < bufferWidth; i++) {
    buffer[i] = 0;
  }
}

void XY5Class::home() {
  cursor = 0;
}

void XY5Class::scrollDisplayLeft() {
  window = (window + 1) % bufferWidth;
  flush();
}

void XY5Class::scrollDisplayRight() {
  window = (window - 1 + bufferWidth) % bufferWidth;
  flush();
}

size_t XY5Class::write(uint8_t c) {
  int offset;

  if ((cursor + XY5_FONT_WIDTH) >= bufferWidth) {  // no space available.
    return 0;
  }

  if ((0x20 <= c) && (c <= 0x60)) {        // ' ' to `
    offset = 0x20;
  } else if ((0x7b <= c) && (c <= 0x7e)) { // { to ~
    offset = 0x3a;
  } else {
    c = 0x7f;
    offset = 0x3a;
  }

  for (int i = 0; i < XY5_FONT_WIDTH; i++) {
    buffer[cursor++] = pgm_read_byte_near(fontData + XY5_FONT_WIDTH * (c - offset) + i);
  }

  cursor++;
  return 1;
}

int XY5Class::set(int x, int y) {
  buffer[x] |= 1 << y;
}

int XY5Class::unset(int x, int y) {
  buffer[x] &= ~(1 << y);
}

int XY5Class::setCursor(int x) {
  if ((0 <= x) && (x <= bufferWidth)) {
    cursor = x;
    return 1;
  } else {
    return 0;
  }
}

int XY5Class::setWindow(int x) {
  if ((0 <= x) && (x <= bufferWidth)) {
    window = x;
    return 1;
  } else {
    return 0;
  }
}

void XY5Class::flush() {
  port->write(XY5_HEADER);
  port->write(XY5_WRITE_COMMAND);
  port->write(address);

  for (int i = 0; i < 28; i++) {
    port->write(buffer[(i + window) % bufferWidth]);
  }

  port->write(XY5_ENDBYTE);
}

const uint8_t XY5Class::fontData[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, // 0x20, space
  0x00, 0x00, 0x5f, 0x00, // 0x21, !
  0x02, 0x01, 0x02, 0x01, // 0x22, "
  0x74, 0x1f, 0x74, 0x1f, // 0x23, #
  0x26, 0x79, 0x4f, 0x32, // 0x24, $
  0x73, 0x0b, 0x64, 0x63, // 0x25, %
  0x76, 0x49, 0x59, 0x26, // 0x26, &
  0x00, 0x04, 0x03, 0x00, // 0x27, '
  0x00, 0x3e, 0x41, 0x41, // 0x28, (
  0x41, 0x41, 0x3e, 0x00, // 0x29, )
  0x00, 0x14, 0x7f, 0x14, // 0x2a, *
  0x00, 0x08, 0x7f, 0x08, // 0x2b, +
  0x40, 0x20, 0x00, 0x00, // 0x2c, ,
  0x08, 0x08, 0x08, 0x08, // 0x2d, -
  0x60, 0x60, 0x00, 0x00, // 0x2e, .
  0x40, 0x38, 0x0e, 0x01, // 0x2f, /
  0x3e, 0x41, 0x41, 0x3e, // 0x30, 0
  0x44, 0x42, 0x7f, 0x40, // 0x31, 1
  0x62, 0x51, 0x49, 0x46, // 0x32, 2
  0x22, 0x49, 0x49, 0x36, // 0x33, 3
  0x1c, 0x12, 0x7f, 0x10, // 0x34, 4
  0x27, 0x45, 0x45, 0x39, // 0x35, 5
  0x3e, 0x49, 0x49, 0x32, // 0x36, 6
  0x01, 0x71, 0x09, 0x07, // 0x37, 7
  0x36, 0x49, 0x49, 0x36, // 0x38, 8
  0x26, 0x49, 0x49, 0x3e, // 0x39, 9
  0x00, 0x00, 0x36, 0x00, // 0x3a, :
  0x00, 0x20, 0x16, 0x00, // 0x3b, ;
  0x08, 0x14, 0x22, 0x41, // 0x3c, <
  0x14, 0x14, 0x14, 0x14, // 0x3d, =
  0x41, 0x22, 0x14, 0x18, // 0x3e, >
  0x02, 0x01, 0x59, 0x06, // 0x3f, ?
  0x3e, 0x55, 0x55, 0x5e, // 0x40, @
  0x7e, 0x09, 0x09, 0x7e, // 0x41, A
  0x7f, 0x49, 0x49, 0x36, // 0x42, B
  0x3e, 0x41, 0x41, 0x22, // 0x43, C
  0x7f, 0x41, 0x41, 0x3e, // 0x44, D
  0x7f, 0x49, 0x49, 0x41, // 0x45, E
  0x7f, 0x09, 0x09, 0x01, // 0x46, F
  0x3e, 0x41, 0x49, 0x3a, // 0x47, G
  0x7f, 0x08, 0x08, 0x7f, // 0x48, H
  0x00, 0x41, 0x7f, 0x41, // 0x49, I
  0x21, 0x41, 0x3f, 0x01, // 0x4a, J
  0x7f, 0x0c, 0x12, 0x61, // 0x4b, K
  0x7f, 0x40, 0x40, 0x40, // 0x4c, L
  0x7f, 0x06, 0x06, 0x7f, // 0x4d, M
  0x7f, 0x06, 0x18, 0x7f, // 0x4e, N
  0x3e, 0x41, 0x41, 0x3e, // 0x4f, O
  0x7f, 0x09, 0x09, 0x06, // 0x50, P
  0x3e, 0x41, 0x61, 0x5e, // 0x51, Q
  0x7f, 0x09, 0x19, 0x66, // 0x52, R
  0x26, 0x49, 0x49, 0x32, // 0x53, S
  0x01, 0x01, 0x7f, 0x01, // 0x54, T
  0x3f, 0x40, 0x40, 0x3f, // 0x55, U
  0x1f, 0x60, 0x60, 0x1f, // 0x56, V
  0x3f, 0x78, 0x78, 0x3f, // 0x57, W
  0x43, 0x3c, 0x3c, 0x43, // 0x58 ,X
  0x00, 0x07, 0x78, 0x07, // 0x59, Y
  0x71, 0x49, 0x45, 0x43, // 0x5a, Z
  0x00, 0x7f, 0x41, 0x41, // 0x5b, [
  0x00, 0x17, 0x78, 0x17, // 0x5c, "\"
  0x41, 0x41, 0x7f, 0x00, // 0x5d, ]
  0x02, 0x01, 0x01, 0x02, // 0x5e, ^
  0x40, 0x40, 0x40, 0x40, // 0x5f, _
  0x01, 0x02, 0x04, 0x00, // 0x60, `
  0x00, 0x08, 0x36, 0x41, // 0x7b, {
  0x00, 0x00, 0x7f, 0x00, // 0x7c, |
  0x41, 0x36, 0x08, 0x00, // 0x7d, }
  0x02, 0x01, 0x02, 0x01, // 0x7e, ~
  0x7f, 0x7f, 0x7f, 0x7f, // out of range
};

